@model Chat
<div class="chat">
    <div class="chat__messages">
        <ul class="chat__messages-list">
            @foreach(var message in Model.Messages) {
                <li class="chat__messages-item">
                    <p class="chat__user-name">
                        <strong class="sr-only">@message.Name</strong>
                        <span class="chat__user-icon">@message.Name.Substring(0, 2)</span>
                    </p>
                    <p class="chat__user-message">@message.Text</p>
                    <time class="chat__user-message-time">@message.TimeStamp</time>
                </li>
            }
             
        </ul>
    </div>
    <form class="chat__form form-chat" onsubmit="sendMessage(event)" asp-controller="Home" asp-action="CreateMessage">
        <label class="form-chat__label">
            <input type="hidden" value="@Model.Id" name="roomId">
            <input type="text"  name="message" class="form-chat__input" />
        </label>
        <button class="form-chat__submit-btn btn btn--form">Send</button>
    </form>
</div>
</div>

@section scripts {
    <script src="~/js/signalr.min.js"></script>
    <script src="~/js/axios.min.js"></script>
    <script>
        let connection = new signalR.HubConnectionBuilder().withUrl("/chatHub").build();

        let _connectionId = ''; 

        connection.on("RecieveMessage", function ({timeStamp, text, name}) {
            const msgList = document.querySelector('.chat__messages-list');
            const fragment = new DocumentFragment();
            const li = document.createElement('li');
            li.classList.add('chat__messages-item');
            li.innerHTML  = `
                <p class="chat__user-name">
                    <strong class="sr-only">${name}</strong>
                    <span class="chat__user-icon">${name.slice(0, 2)}</span>
                </p>
                <p class="chat__user-message">${text}</p>
                <time class="chat__user-message-time">${timeStamp}</time>
            `;
            fragment.appendChild(li);
            msgList.appendChild(fragment);
        });

        

        connection.start().then(function(){
            connection.invoke('getConnectionId').then(function(connectionId){
                _connectionId = connectionId
                // debugger;
                joinRoom();
            })
        })
        .catch(function(err){
            console.log(err);
        });

  let joinRoom = function() {
      const URL = '/joinRoom/' + _connectionId + '/@Model.Id'
      axios.post(URL, null).then(res => {
          console.log("Joined in room", res);
      })
      .catch(err => {
          console.error("Failed to join in room", err);
      })
  }

  let sendMessage = function (e) {
    e.preventDefault();
    const form = e.target;
    const data = new FormData(form);
    axios.post('/Chat/SendMessage/', data).then((res) => {
        const input = form.querySelector('input[name="message"]');
        input.value = '';
        input.focus();
        console.log('Message send');
    }).catch((e) => {
        console.error('Error while sending message', e);
    })
  }
    </script>
}
